version: 2.1

orbs:
  swissknife: roopakv/swissknife@0.51.0
  slack: circleci/slack@3.4.2

executors:
  sfcc-executor:
    docker:
      - image: boltdev/sfcc-ci:v1.1.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD

parameters:
  run_release_workflow:
    type: boolean
    default: false
  tag:
    type: string
    default: "21.1"

commands:
  checkout-and-install:
    description: Sets up the repo including installing deps
    steps:
      - checkout:
          path: /home/circleci/bolt-demandware-embedded
      - restore_cache:
          keys:
            - npm-v2-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: |
            npm install --prefer-offline --no-audit
      - run:
          name: Compile Assets # check for css and js being generated successfully
          command: |
            npm run compile
            bash .circleci/scripts/test-compile-error.sh
            test -d ./cartridges/int_bolt_embedded_sfra/cartridge/static/default/css && echo "Client CSS generated" || exit 1
            test -d ./cartridges/int_bolt_embedded_sfra/cartridge/static/default/js && echo "Client JS generated" || exit 1
      - save_cache:
          key: npm-v2-{{ checksum "package-lock.json" }}
          paths:
            - /home/circleci/.npm
            - /home/circleci/bolt-demandware-embedded/node_modules

  create-zip-artifact:
    description: Creates the final zipped artifact for release
    steps:
      - run:
          name: Zip the current release artifact
          command: bash .circleci/scripts/create-zip-artifacts.sh << pipeline.parameters.tag >>
      - persist_to_workspace:
          root: ../artifacts
          paths:
            - "*.zip"
            - "release-artifacts.sh"
            - "*.txt"
      - store_artifacts:
          path: ../artifacts

  notify-buildcop:
    description: Notify build cop if tests fail on master
    steps:
      - slack/status:
          fail_only: true
          failure_message: ":red_circle: A $CIRCLE_JOB job has failed!"
          only_for_branches: master
          webhook: $GREENKEEPER_WEBHOOK

jobs:
  lint-and-unit-test:
    working_directory: /home/circleci/bolt-demandware-embedded
    executor: sfcc-executor
    steps:
      - checkout-and-install
      ## TODO: fix linter as babel breaks the current linter. /cartridges used to be ignored which means
      ## only /src were linted. Now we don't use babel anymore so we should clean it up
      # - run:
      #     name: Lint
      #     command: |
      #       npm run lint
      # - run:
      #     name: Merchant Lint
      #     command: |
      #       npm run eslint:merchant

      # TODO: re-enable once we add in unit tests
#      - run:
#          name: Unit Test
#          command: |
#            npm run test:unit
      - notify-buildcop

  # TODO: fix this to run against embedded cartridge. This currently runs on zzgv-002 which is for V1
  integration-tests:
    working_directory: /home/circleci/bolt-demandware-embedded
    executor: sfcc-executor
    steps:
      - checkout-and-install
      - run:
          name: Running integration tests against zzgv-002
          command: bash .circleci/scripts/run-integration-tests.sh
      - notify-buildcop

  update-qa-sandbox:
    working_directory: /home/circleci/bolt-demandware-embedded
    executor: sfcc-executor
    steps:
      - checkout-and-install
      - run:
          name: Setup dw.json for meta upload
          command: |
            echo "{" \
              "\"hostname\":\"${QA_EMBEDDED_SANDBOX_HOSTNAME}\"," \
              "\"client-id\":\"${SFCCCLIENTID}\"," \
              "\"client-secret\":\"${SFCCCLIENTSECRET}\"" \
              "}" > dw.json
      - run:
          name: Upload metadata to QA sandbox zzgv-018
          command: |
            sfcc-ci client:auth ${SFCCCLIENTID} ${SFCCCLIENTSECRET}
            npm run uploadMetadata
      - run:
          name: Reset dw.json #On meta upload process, adding user/password data to dw.json causes auth issue, it's a SFCC bug
          command: |
            rm dw.json
      - run:
          name: Setup dw.json for cartridge upload
          command: |
            echo "{" \
              "\"hostname\":\"${QA_EMBEDDED_SANDBOX_HOSTNAME}\"," \
              "\"client-id\":\"${SFCCCLIENTID}\"," \
              "\"client-secret\":\"${SFCCCLIENTSECRET}\"," \
              "\"username\":\"${SFCC_QA_ACCOUNT}\"," \
              "\"password\":\"${SFCC_QA_ACCOUNT_PW}\"," \
              "\"code-version\":\"QA\"" \
              "}" > dw.json
      - run:
          name: Upload cartridges to QA sandbox zzgv-018
          command: |
            bash .circleci/scripts/upload-cartridges.sh
      - notify-buildcop

  publish-github-release:
    docker:
      - image: circleci/golang:1.10
    steps:
      - attach_workspace:
          at: ../artifacts
      - run:
          name: "Publish Release on GitHub"
          command: bash ../artifacts/release-artifacts.sh << pipeline.parameters.tag >>

  create-release:
    working_directory: /home/circleci/bolt-demandware-embedded
    executor: sfcc-executor
    steps:
      - checkout-and-install
      - create-zip-artifact

  create-auto-release:
    working_directory: /home/circleci/bolt-demandware-embedded
    executor: sfcc-executor
    steps:
      - checkout-and-install
      - run:
          name: Zip the current release artifact
          command: bash .circleci/scripts/auto-release.sh

workflows:
  sfcc-flow:
    when:
      not: << pipeline.parameters.run_release_workflow >>
    jobs:
      - lint-and-unit-test:
          context: sfcc-creds

      - integration-tests:
          context: sfcc-creds
          requires:
            - update-qa-sandbox
          filters:
            branches:
              only:
                - master

      - update-qa-sandbox:
          context: sfcc-creds
          filters:
            branches:
              only:
                - master

  sfcc-release-flow:
    when: << pipeline.parameters.run_release_workflow >>
    jobs:
      - create-release:
          context: sfcc-creds
      - publish-github-release:
          requires:
            - create-release
          context: sfcc-creds
          filters:
            branches:
              only:
                - master
                - /release\/.*/

  # auto-release:
  #   triggers:
  #     - schedule:
  #         cron: '0 5 1 * *'
  #         filters:
  #           branches:
  #             only:
  #               - master
  #               - /release\/.*/
  #   jobs:
  #     - create-auto-release:
  #         context: sfcc-creds
  #         filters:
  #           branches:
  #             only:
  #               - master
  #               - /release\/.*/
